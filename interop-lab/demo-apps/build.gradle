/*******************************************************************************
 * Copyright (c) 2017, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

buildscript {

    dependencies {
        //classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        maven {
            url 'https://build.openice.info/artifactory/remote-repos' 
        }
        maven {
            url="https://dl.bintray.com/calmdev/gradle-plugins"
        }
        mavenLocal()
        mavenCentral()
    }
}

plugins {
  id 'org.openjfx.javafxplugin' version '0.0.13'
}

dependencies {
	implementation group: 'org.openjdk.nashorn', name: 'nashorn-core', version: '15.4'
}


repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
//apply plugin: "me.champeau.jbake"
//apply plugin: 'javafx-gradle-plugin'

defaultTasks 'build'

javafx {
  version = "17"
  modules = [ 'javafx.base', 'javafx.controls' , 'javafx.fxml' , 'javafx.swing' , 'javafx.web' ]
}

/*
jfxDeploy {
    verbose = true
}
*/

/*
distZip {
  dependsOn jfxNative
}

distTar {
  dependsOn jfxNative
}
*/

applicationName = 'OpenICE'

//jfx {
//    verbose=true
//    //appID 'org.mdpnp.apps.testapp.Main'
//    appName="OpenICE"
//    mainClass="org.mdpnp.apps.testapp.Main"
//    jfxAppOutputDir = "build/distributions"
//    jfxMainAppJarName = "demo-apps.jar"
//    deployDir = "src/deploy"
//    useEnvironmentRelativeExecutables = true
//    //Think libFolderName might be equivalent to "app" being the deployment directory in the old plugin
//    libFolderName = "lib"
//
//    // gradle jfxJar
//    css2bin = false
//    preLoader = null // String
//    updateExistingJar = false
//    allPermissions = false
//    manifestAttributes = null // Map<String, String>
//    addPackagerJar = true
//    copyAdditionalAppResourcesToJar = false
//    skipCopyingDependencies = false
//    useLibFolderContentForManifestClasspath = false
//    fixedManifestClasspath = null
//
//    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
//    vendor = "mdpnp.org"
//    nativeOutputDir = "build/jfx/native"
//    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
//    jvmProperties = null // Map<String, String>
//    jvmArgs = null // List<String>
//    userJvmArgs = null // Map<String, String>
//    launcherArguments = null // List<String>
//    nativeReleaseVersion = "1.5"
//    needShortcut = false
//    needMenu = false
///*
//    bundleArguments = [
//        // dont bundle JRE (not recommended, but increases build-size/-speed)
//        //runtime: null
//    ]
//*/
//    appName = "OpenICE" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/package/windows/project.ico"
//    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
//    additionalAppResources = null // path to some additional resources when creating application-bundle
//    secondaryLaunchers = []	//Don't need any other .exes
//    fileAssociations = null // List<Map<String, Object>>
//    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
//    customBundlers = null // List<String>
//    failOnError = false
//    onlyCustomBundlers = false
//    skipJNLP = false
//    skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
//    additionalJarsignerParameters = null // List<String>
//    skipMainClassScanning = false // set to true might increase build-speed
//    
//    skipNativeLauncherWorkaround124 = false
//    skipNativeLauncherWorkaround167 = false
//    skipNativeLauncherWorkaround205 = false
//    skipJNLPRessourcePathWorkaround182 = false
//    skipSigningJarFilesJNLP185 = false
//    skipSizeRecalculationForJNLP185 = false
//    skipMacBundlerWorkaround = false
//    
//    // gradle jfxRun
//    runJavaParameter = null // String
//    runAppParameter = null // String
//
//    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
//    alternativePathToJarFile = null // String
//    
//    // to disable patching of ant-javafx.jar, set this to false
//    usePatchedJFXAntLib = false
//    
//    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
//    checkForAbsolutePaths = false
//    
//    // gradle jfxGenerateKeyStore
//    keyStore = "src/main/deploy/keystore.jks"
//    keyStoreAlias = "myalias"
//    keyStorePassword = "password"
//    keyPassword = null // will default to keyStorePassword
//    keyStoreType = "jks"
//    overwriteKeyStore = false
//    
//    certDomain = null // required
//    certOrgUnit = null // defaults to "none"
//    certOrg = null // required
//    certState = null // required
//    certCountry = null // required
//}
    
/*
jbake {
    srcDirName = 'src/docs'
    destDirName = 'docs'
}
*/


sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

mainClassName = 'org.mdpnp.apps.testapp.Main'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
    specificationVersion = project.version.substring(0, project.version.lastIndexOf('.')) 
    localOsName = System.properties['os.name'].toLowerCase();
    localOsArch = System.properties['os.arch'].toLowerCase();
    currentPath = System.getenv('PATH');
}

manifest { attributes "Main-Class" : mainClassName }

dependencies {
    implementation project(':devices:common')
    implementation project(':interop-lab:demo-devices')
    implementation project(':interop-lab:demo-guis')
    implementation project(':interop-lab:demo-guis-javafx')
    implementation project(':interop-lab:demo-purejavacomm')
    implementation project(':data-types:x73-idl-rti-dds')

    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: SLF4J_VERSION
    implementation files('../../artifacts/mdpnp-sounds-0.1.0.jar')
    implementation files('../../artifacts/nddsjava.jar')

    //
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.19.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.19.0'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.2'
    
    // Default capture device is a trimmed down piece of OpenIMAJ
    implementation group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.10'

    implementation group: 'org.springframework', name: 'spring-context', version: '6.0.2'
    implementation group: 'org.springframework', name: 'spring-jdbc',    version: '6.0.2'
    implementation group: 'com.google.guava',    name: 'guava',          version: '18.0'

    implementation group: 'ca.uhn.hapi', name: 'hapi-base', version: '2.2'
    implementation group: 'ca.uhn.hapi', name: 'hapi-structures-v26', version: '2.2'
    
    implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-base', version: '0.9'
    implementation group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-dstu2', version: '0.9'
    
    implementation files('../../artifacts/Utility-0.0.1.jar')
    
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.1.2'

    implementation group: 'org.hsqldb', name: 'hsqldb', version: '2.3.2'

    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.4.1'

    implementation group: 'org.mongodb', name: 'bson',                version: '3.2.2'
    implementation group: 'org.mongodb', name: 'mongodb-driver-core', version: '3.2.2'
    implementation group: 'org.mongodb', name: 'mongodb-driver',      version: '3.2.2'

    implementation files('../../artifacts/pixelmed.jar')
    
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.1000')
    
    implementation 'com.amazonaws:aws-java-sdk-s3'
    implementation group: 'software.amazon.awssdk', name: 's3-transfer-manager', version: '2.17.16-PREVIEW'

    testImplementation("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.9.1")
    testImplementation project(':devices:simulated')
}

test {
	useJUnitPlatform()
	systemProperty 'user.timezone' , 'EST'
}

run {
    if(localOsName.contains("linux")) {
      if(localOsArch.contains("aarch")) {
        environment 'LD_LIBRARY_PATH', 'native/libs/aarch'
      } else {
        environment 'LD_LIBRARY_PATH', 'native/libs/linux'
      }
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'
    }
    if(localOsName.contains("windows")) {
      environment 'PATH', currentPath + ';native/libs/windows'
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'
    }
    if(localOsName.contains("mac")) {
      environment 'DYLD_LIBRARY_PATH', 'native/libs/macosx'
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'

    }
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.javafx.iio=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.iio.common=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
               '--add-exports=javafx.controls/com.sun.javafx.charts=ALL-UNNAMED',
    ]

}

task 'runDevice'(type: JavaExec) {
    group = ApplicationPlugin.APPLICATION_GROUP
    classpath=sourceSets.main.runtimeClasspath
    mainClass='org.mdpnp.apps.testapp.Main'
    if(localOsName.contains("linux")) {
      if(localOsArch.contains("aarch")) {
        environment 'LD_LIBRARY_PATH', 'native/libs/aarch'
      } else {
        environment 'LD_LIBRARY_PATH', 'native/libs/linux'
      }
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'
    }
    if(localOsName.contains("windows")) {
      environment 'PATH', currentPath + ';native/libs/windows'
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'
    }
    if(localOsName.contains("mac")) {
      environment 'DYLD_LIBRARY_PATH', 'native/libs/macosx'
      environment 'SEC_ARTIFACT_DIR', '../../data-types/x73-idl-rti-dds/src/main/resources/META-INF'
      environment 'RTI_LICENSE_FILE', 'build/resources/main/OpenICE_license.dat'

    }
    jvmArgs = ['--add-exports=javafx.graphics/com.sun.javafx.iio=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.iio.common=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED',
               '--add-exports=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED',
               '--add-exports=javafx.controls/com.sun.javafx.charts=ALL-UNNAMED',
    ]

}

task 'makeFlatRuntime'(type: Copy) {
    from configurations.runtimeClasspath
    into 'flat'
}

task 'copyThisJar'(type: Copy) {
  from layout.buildDirectory.dir('libs')
  include "*.jar"
  into 'flat'
}

task 'copyNativeLibs'(type: Copy) {
  from 'native/libs/linux'
  include '*.so'
  into 'flat'
}

task 'copyLicenseFile'(type: Copy) {
  from layout.buildDirectory.dir('resources/main')
  include 'OpenICE_license.dat'
  into 'flat'
}

copyThisJar.configure { dependsOn(jar) }
copyLicenseFile.configure { dependsOn(processResources) }
makeFlatRuntime.configure { dependsOn(copyThisJar,copyNativeLibs,copyLicenseFile) }

jar {
    manifest {
        attributes("Main-Class": 'org.mdpnp.apps.testapp.Main', 
        "Built-By": System.properties['user.name'], 
        "Created-By": System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
        "Implementation-Title": project.name, 
        "Implementation-Version": project.version, 
        "Build-Date": buildDate, 
        "Build-Time": buildTime,
        "Specification-Title": project.name, 
        "Specification-Version": specificationVersion, 
        "Implementation-Vendor": project.group,
        "Specification-Vendor": project.group, 
        "Build-Number": project.version,
        "Class-Path" : configurations.runtimeClasspath.files.collect {it.getName()}.join(' '))
    }
    //Ensure that jfxNative gets run immediately after jar, and so before distZip and distTar
/*
    doLast {
      jfxNative
    }
*/
}
